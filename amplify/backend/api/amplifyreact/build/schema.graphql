
type Fleet {
  id: ID!
  name: String!
  status: String!
  speed: String!
  location: String!
  tank: String!
  createdAt: AWSDateTime!
  updatedAt: AWSDateTime!
}

input ModelStringInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

input ModelIntInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelFloatInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  between: [Float]
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelBooleanInput {
  ne: Boolean
  eq: Boolean
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
}

input ModelIDInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
  attributeExists: Boolean
  attributeType: ModelAttributeTypes
  size: ModelSizeInput
}

enum ModelAttributeTypes {
  binary
  binarySet
  bool
  list
  map
  number
  numberSet
  string
  stringSet
  _null
}

input ModelSizeInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  between: [Int]
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelFleetConnection {
  items: [Fleet]!
  nextToken: String
}

input ModelFleetFilterInput {
  id: ModelIDInput
  name: ModelStringInput
  status: ModelStringInput
  speed: ModelStringInput
  location: ModelStringInput
  tank: ModelStringInput
  and: [ModelFleetFilterInput]
  or: [ModelFleetFilterInput]
  not: ModelFleetFilterInput
}

type Query {
  getFleet(id: ID!): Fleet
  listFleets(filter: ModelFleetFilterInput, limit: Int, nextToken: String): ModelFleetConnection
}

input ModelFleetConditionInput {
  name: ModelStringInput
  status: ModelStringInput
  speed: ModelStringInput
  location: ModelStringInput
  tank: ModelStringInput
  and: [ModelFleetConditionInput]
  or: [ModelFleetConditionInput]
  not: ModelFleetConditionInput
}

input CreateFleetInput {
  id: ID
  name: String!
  status: String!
  speed: String!
  location: String!
  tank: String!
}

input UpdateFleetInput {
  id: ID!
  name: String
  status: String
  speed: String
  location: String
  tank: String
}

input DeleteFleetInput {
  id: ID!
}

type Mutation {
  createFleet(input: CreateFleetInput!, condition: ModelFleetConditionInput): Fleet
  updateFleet(input: UpdateFleetInput!, condition: ModelFleetConditionInput): Fleet
  deleteFleet(input: DeleteFleetInput!, condition: ModelFleetConditionInput): Fleet
}

type Subscription {
  onCreateFleet: Fleet @aws_subscribe(mutations: ["createFleet"])
  onUpdateFleet: Fleet @aws_subscribe(mutations: ["updateFleet"])
  onDeleteFleet: Fleet @aws_subscribe(mutations: ["deleteFleet"])
}

